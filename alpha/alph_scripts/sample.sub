#!/bin/bash

# LAUNCH with 4 arguments:
# sampletype = 0 (PSEUDO, default) or = 1 (SOBOL)
# samplespercore (default = 1): Number of consequtive ab initio jobs per core
# startindex (default = 1): Jobs will run in the directories job.STARTINDEX, job.STARTINDEX+1, ...
# samplestart (default = 1): Skip SAMPLESTART-1 random numbers in the stream before starting
# The number of independent serial jobs that will run is set in the "hostfile"

sampletype=0
samplespercore=1
startindex=1
samplestart=1

if [ -z "$1" ]; then
sampletype=0
echo pseudosampling...
elif [[ "$1" == 0 ]]; then
sampletype=0
echo pseudosampling...
elif [[ "$1" == 1 ]]; then
sampletype=1
echo sobol sampling...
else
echo argument 1 must 0 or 1
exit 1
fi

renum='^[0-9]+$'
if [ -z "$2" ]; then
samplespercore=1
elif ! [[ $2 =~ $renum ]]; then
echo argument 2 must be a number
exit 2
else
samplespercore=$2
fi
echo $samplespercore samples per core

if [ -z "$3" ]; then
startindex=1
elif ! [[ $3 =~ $renum ]]; then
echo argument 3 must be a number
exit 3
else
startindex=$3
fi
echo jobs will run starting in job.$startindex, ...

if [ -z "$4" ]; then
samplestart=1
elif ! [[ $4 =~ $renum ]]; then
echo argument 4 must be a number
exit 4
else
samplestart=$4
fi
echo jobs will start with random number $samplestart

i=0
while read -r line
do
	tmp=($line)
	n=${tmp[0]}
	c=${tmp[1]}
	if [ "$n" != "" ]; then
		node[i]=$n
		cores[i]=$c
		i=$((i+1))
		ntot=$((ntot+c))
	else
		if [ $i -gt 0 ]; then
			break
		fi
	fi
done < "hostfile"

echo "Launching $ntot jobs on the $i nodes: ${node[*]}"

cwd=`pwd`

l=$((startindex-1))

echo > killall.x
echo > monitor.x

j=0
while [ $j -lt $i ]; do
k=1
cat << EOF1 > ${node[$j]}.x
#!/bin/bash

cd $cwd

EOF1

while [ $k -le ${cores[$j]} ]; do
l=$((l+1))
dir=job."$l"
if [ -d "$dir" ]; then
echo "$dir exists. Quitting the script."
exit 1
fi

### Specialized stuff ###
if [ $sampletype == 0 ]; then
#seed=$((RANDOM + 1))  # 1 to 32768...
seed=$((samplestart + samplespercore*(l-startindex) ))
elif [ $sampletype == 1 ]; then
seed=$((samplestart + samplespercore*(l-startindex) ))
else
echo bad sample type
exit 1
fi
cat << EOF >> ${node[$j]}.x
cp -R r0 $dir
cd $dir
/bin/rm input
while read -r line
do
line=\${line//RANSEED/$seed}
line=\${line//TYPE/$sampletype}
line=\${line//SAMPLES/$samplespercore} 
echo \$line >> input
done < "../r0/input"
/home/ajasper/autofit/exe/sample-molpro.x.opt < input > output &
cd ..

EOF
### End specialized stuff ###

k=$((k+1))
done
chmod u+x ${node[$j]}.x
echo "/usr/bin/ssh ${node[$j]} killall -u ajasper" >> killall.x
echo "echo ${node[$j]} " >> monitor.x
echo "/usr/bin/ssh ${node[$j]} ps | grep -c sample " >> monitor.x
/usr/bin/ssh ${node[$j]} $cwd/${node[$j]}.x &
j=$((j+1))
done
