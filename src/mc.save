      subroutine mc(im)

      implicit none
      include 'param.f'
      include 'c_sys.f'

      integer i,nbound,im,ii,j,nclu,ido,isamp,hit,hitho,neval,ibin,
     & k,nho,nfr,samptype
      double precision xvec(mnat*3),mmm(mnat),xxm(3,mnat),ppm(3,mnat),
     & rin(3*mnat),rout(3*mnat),vec(3,mnat),etot,rtmp1,rtmp2,
     & disp(3*mnat),vec2(3,mnat,3*mnat),esamp,esampho,ne,neho,
     & nemc,nemcho,pp,pref,hscal,neana,tmp,ceval,nsav(mntraj),perr,
     & rhoana,etmp,nehom,nehop,wsav(mntraj),wwtot,
     & rhoho,estep,nep,nem,rhomc,vtot,hrad,rrr,
     & ptest,tmp1,tmp2,cevalmax,irot(mnat*3),x10,x21,x00,sinth,dd,
     & mom(2),itype(3*mnat),rad,radmax,ww,rad0,alpha
      character*2 symb(mnat)

c ********************
c NUMERICAL PARAMETERS
      ceval=3.d0 ! skip evaluations at HO estimated energies > CEVAL*ETOT
c      samptype=0 ! dumb sampling, uniform in a hypercube
      samptype=1 ! uniform in d (size of hypercube)
c      samptype=2 ! gaussian in d
c      samptype=3 ! uniform in r (generalized hyperradius) DOESN'T WORK YET!
      rad0=.0d0 ! center of gaussian
      alpha=5.d0 ! 1 sigma width of gaussian
      estep=0.5d0/autocmi ! numerically differentiate N(E) with stepsize ESTEP
c ********************

c Convert to local variables for convenience
      do i=1,natom(im)
       ii=i+iatom(im)
       mmm(i) = mm(ii)
       symb(i) = symbol(ii)
       do j=1,3
        xxm(j,i) = xx0(j,ii)
       enddo
      enddo
      nclu=natom(im)
      etot=scale0im(im)

c NBOUND is the dimension of the sampled space
      if (nmtype(im).eq.0) then
        nbound=3*nclu-6
      else
        nbound=3*nclu-7
      endif
      if (nclu.eq.2) then
        nbound=1
      endif

      do i=1,nbound
        itype(i)=0
        do j=1,mccurv
          if (mcmode(j).eq.i) itype(i)=mctype(j)
        enddo
      enddo

c Precompute things for the curvilinear modes
      do i=1,mccurv
        if (mctype(i).eq.1) then
c         calculate Brot
          ii=0
          mom(1)=0.d0
          mom(2)=0.d0
          do j=1,nclu
            if (j.eq.mcpar(1,i)) then
            ii=1
            elseif (j.eq.mcpar(2,i)) then
            ii=2
            else
            x21=0.d0
            x10=0.d0
            x00=0.d0
            do k=1,3
            x21=x21+(xxm(k,mcpar(2,i))-xxm(k,mcpar(1,i)))**2
            x10=x10+(xxm(k,mcpar(1,i))-xxm(k,j))**2
            x00=x00+(xxm(k,mcpar(1,i))-xxm(k,j))*
     &            (xxm(k,mcpar(2,i))-xxm(k,mcpar(1,i)))
            enddo
            x21=dsqrt(x21)
            x10=dsqrt(x10)
            sinth=dsqrt(1.d0-(x00/(x21*x10))**2)
            dd=x10*sinth  ! the distance of atom j from the vector defining the torsion
            if (ii.ne.0) mom(ii)=mom(ii)+dd*mmm(j)
            endif
          enddo
          irot(mcmode(i))=dsqrt(mom(1)*mom(2))
          write(6,1066)"For torsion ",mcmode(i),"   B1 = ",
     &        autocmi/(2.d0*mom(1))," cm-1"
          write(6,1067)"                    B2 = ",
     &        autocmi/(2.d0*mom(2))
          write(6,1067)"                  Beff = ",
     &        autocmi/(2.d0*irot(mcmode(i)))
          write(6,*)
 1066   format(a,i5,a,f10.4,a)
 1067   format(a,f10.4)
        endif
      enddo
 
c find turning points on the real PES for each normal mode
c calculate prefactor HSCAL
      hscal=1.d0
      rrr=1.d0
      if (lreadhess) write(6,*)"Reading turning points from unit 70"
      write(6,'(2a)')" Mode    Freq(cm-1)    Rin(m.s.au)   Rout(m.s.au)"
     &         ,"   RturnHO(m.s.au)    VHO(Rout)/E     VHO(Rout)/E"
      do ido=1,nbound
        do i=1,nclu
        do j=1,3
          vec(j,i)=nmvec(j,i,ido,im) ! mass-scaled normal mode vectors
          vec2(j,i,ido)=nmvec(j,i,ido,im)
        enddo
        enddo

        if (itype(ido).eq.0) then
c       Cartesian displacement

        if (lreadhess) then ! read from fort.70
c        if (.false.) then
          read(70,*)ii,rin(ido),rout(ido)
        else
c         calculate turning points
          call nmturn(symb,xxm,mmm,nclu,vec,etot,rtmp1,rtmp2,
     &                repflag,nsurf0) ! returns turning points
          rin(ido)=rtmp1
          rout(ido)=rtmp2
          write(70,*)ido,rin(ido),rout(ido) ! save restart info to fort.70
        endif

        rtmp1 = dsqrt(2.d0*etot/(freq(ido,im)**2*mu)) ! harmonic turning point
        tmp1=0.5d0*mu*freq(ido,im)**2*rin(ido)**2/etot ! harmonic PES at real turning point
        tmp2=0.5d0*mu*freq(ido,im)**2*rout(ido)**2/etot
        write(6,1010)ido,freq(ido,im)*autocmi,rin(ido),rout(ido),rtmp1,
     &       tmp1,tmp2

        elseif (itype(ido).eq.1) then
c       torsion

        rin(ido)=-pi*dsqrt(irot(ido)/mu) ! mass scale the torsion
        rout(ido)=pi*dsqrt(irot(ido)/mu) ! mass scale the torsion
        rtmp1=0.d0
        tmp1=0.d0
        tmp2=0.d0
        write(6,1010)ido,freq(ido,im)*autocmi,rin(ido),rout(ido),rtmp1,
     &       tmp1,tmp2," TORSION"
        endif

        if (samptype.ne.3) then
        hscal=hscal*dabs(rout(ido)-rin(ido))/(2.d0*pi) ! hypervolume of box/h**nbound
        else
        rrr=rrr*max(-rin(ido),rout(ido))
        endif

      enddo
      if (samptype.eq.3) then
      call nsphere(nbound,1.d0,pref)
      hscal=rrr*pref/(2.d0*pi)**nbound
      rrr=rrr**(1.d0/dble(nbound))
      endif
      write(6,*)


c analytic HO solution
      neana=1.d0
      nho=0
      nfr=0
      do i=1,nbound
        if (itype(i).eq.0) then
          nho=nho+1
          neana=neana*(etot/freq(i,im))
        elseif (itype(i).eq.1) then
          neana=neana*dsqrt(etot*2.d0*irot(i))   ! root(E/B) = root(E 2 I)
          nfr=nfr+1
        endif
      enddo
      if (nfr.eq.0) then
c     only HOs
        do i=1,nho
          neana=neana/dble(i)
        enddo
        rhoana=neana/etot*dble(nho)
      elseif (nfr.eq.1) then
c     one torsion
        neana=neana*2.d0**(nho+1)
        ii=2*nho+1
        do i=1,ii,2
        neana=neana/dble(i)
        enddo
        rhoana=neana/etot*dble(2*nho+1)/2.d0
      endif

c total volume
      vtot=hscal*(2.d0*pi)**nbound

c normalize gaussian weights 
      wwtot=0.d0
      do i=1,1000
        rad=dble(i)/1000.d0
        wwtot=wwtot+dexp(-(rad-rad0)**2/(2.d0*alpha**2))/1000.d0
      enddo
      do i=1,100
        rad=dble(i)/100.d0
c        print *,rad,dexp(-(rad-rad0)**2/(2.d0*alpha**2))/wwtot
      enddo

c output
        write(80,*)"[Molden Format]"
        write(80,*)"[GEOMETRIES] XYZ"

c MC SAMPLING LOOP
      cevalmax=1.d0
      tmp=0.d0
      ne=0.d0
      neho=0.d0
      nehop=0.d0
      nehom=0.d0
      hit=0
      hitho=0
      isamp=0
      neval=0

      write(6,'(4a)')"      Nhit     Nsamp     Neval   %hit   ",
     & "    W        %err     r,1/cm-1    W/W(HO,an) ",
     & " W(HO)/W(HO,an) r/r(HO,an) r(HO)/r(HO,an)",
     & "    Cmax "

      DO WHILE(hit.lt.ntraj)

        isamp=isamp+1 ! total number of trials

        rad=1.d0
        if (samptype.eq.1) call ranno(rad,0.d0,1.d0)
        if (samptype.eq.2) call rangaussian(rad,rad0,alpha)
        if (samptype.eq.3) call ranno(rad,0.d0,1.d0)
c        rad=0.2

c       get geometry (expressed here as a vector of displacements)
  10    radmax=0.d0
        hrad=0.d0
        do i=1,nbound
        rtmp1=rin(i)
        rtmp2=rout(i)
        if (samptype.eq.3) rtmp1=-1.d0
        if (samptype.eq.3) rtmp2=1.d0
        call ranno(disp(i),rtmp1,rtmp2) ! random, uniform displacements
        hrad=hrad+disp(i)**2
        radmax=max(radmax,disp(i)/rtmp1)
        radmax=max(radmax,disp(i)/rtmp2)
        if (mctype(i).eq.1) disp(i)=0.d0
        enddo
        hrad=dsqrt(hrad)
        if (samptype.eq.3) then
        if (hrad.gt.1.d0) go to 10
        do i=1,nbound
        disp(i)=disp(i)/hrad
        enddo
        endif

        esampho=0.d0
        do i=1,nbound
        if (samptype.eq.1.or.samptype.eq.2) disp(i)=disp(i)*rad/radmax
        if (samptype.eq.3) disp(i)=disp(i)*max(-rin(i),rout(i))*rad
        esampho=esampho+0.5d0*mu*freq(i,im)**2*disp(i)**2
        enddo
        ww=1.d0
        if (samptype.eq.2) 
     &    ww=dexp(-(rad-rad0)**2/(2.d0*alpha**2))/wwtot
c     &    ww=dexp(-(rad-rad0)**2/(2.d0*alpha**2))/sqrt(2.d0*pi*alpha**2)
        if (samptype.ne.0.and.samptype.ne.3) 
     &   ww=dble(nbound)*rad**(nbound-1)/ww
        if (samptype.eq.3) 
     &   ww=dble(nbound)*rad**(nbound-1)/ww

c       evaluate potential (or skip if HO estimate is too high)
        if (esampho.lt.ceval*etot.or.ceval.lt.0.d0) then
        neval=neval+1
c       make displacements & return energy
        call nmpot(symb,xx0,mm,nclu,nbound,
     &             vec2,repflag,nsurf0,disp,esamp)
c        print *,isamp,esamp*autoev,esampho*autoev
        else
        esamp=esampho
        endif

c       evaluate MC sampled harmonic N(E)
        if (esampho.lt.etot) then
          hitho=hitho+1
          pp=dsqrt(2.d0*mu*(etot-esampho))
          call nsphere(nbound,pp,pref)
          neho=neho+pref*ww
          nemcho=neho/dble(isamp)*hscal
        endif

c       numerically differentiate harmonic N(E) 
        etmp=etot-estep
        if (esampho.lt.etmp) then
          pp=dsqrt(2.d0*mu*(etmp-esampho))
          call nsphere(nbound,pp,pref)
          nehom=nehom+pref*hscal*ww
        endif

        etmp=etot+estep
        if (esampho.lt.etmp) then
          pp=dsqrt(2.d0*mu*(etmp-esampho))
          call nsphere(nbound,pp,pref)
          nehop=nehop+pref*hscal*ww
        endif
        rhoho=(nehop-nehom)/(2.d0*estep*dble(isamp))

c       numerically differentiate true N(E) 
        etmp=etot-estep
        if (esamp.lt.etmp) then
          pp=dsqrt(2.d0*mu*(etmp-esamp))
          call nsphere(nbound,pp,pref)
          nem=nem+pref*hscal*ww
        endif

        etmp=etot+estep
        if (esamp.lt.etmp) then
          pp=dsqrt(2.d0*mu*(etmp-esamp))
          call nsphere(nbound,pp,pref)
          nep=nep+pref*hscal*ww
        endif
        rhomc=(nep-nem)/(2.d0*estep*dble(isamp))

c       evaluate MC sampled true N(E)
        if (esamp.lt.etot) then
          if (esampho/etot.gt.cevalmax) cevalmax=esampho/etot
          hit=hit+1
          pp=dsqrt(2.d0*mu*(etot-esamp))
          call nsphere(nbound,pp,pref)
          nsav(hit)=pref*hscal ! save for bootstrap analysis
          wsav(hit)=ww
          ne=ne+nsav(hit)*wsav(hit) ! treat sampling over momentum analytically
c          write(99,*)rad,hit,nsav(hit),wsav(hit),nsav(hit)*wsav(hit)
          nemc=ne/dble(isamp)
          perr=0.d0
c          if (hit.gt.nprint*10) nprint=nprint*10
          if (mod(hit,nprint).eq.0) then
            call bootstrap(nsav,wsav,mntraj,hit,isamp,perr) ! compute boostrap uncertainty
            write(6,1060)hit,isamp,neval,
     &            dble(hit)/dble(neval)*100.d0,nemc,perr,rhomc/autocmi,
     &            nemc/neana,nemcho/neana,
     &            rhomc/rhoana,rhoho/rhoana,cevalmax,nemc/nemcho
          endif
c          if ((esampho/esamp).gt.tmp) print *,tmp
c          if ((esampho/esamp).gt.tmp) tmp=esampho/esamp
c          write(99,*)isamp,rad,hit,nsav(hit),ww,nsav(hit)*wsav(hit)
        else
c          write(99,*)isamp,rad,0,0.,wsav(hit),0.
        endif

      ENDDO
c     END SAMPLING LOOP

      stop
 1010 format(i5,6f15.5,1a)
 1011 format(i10,10f15.5)
 1060 format(3i10,0pf7.1,1pe13.5,0pf7.1,0p20f13.5)
      return
      end
